---
import $ from "../lib/jquery.mjs";

const { entry } = Astro.props;
const name = entry.find("entry").attr("name");
const returns = entry.find("entry").attr("return");
const signatures = entry
  .find("signature")
  .map(function () {
    const $sig = $(this);
    let ret = returns;
    const $cbReturns = $sig.find("> argument").first().find("return");

    if ($cbReturns.length !== 0) {
      ret = $cbReturns
        .map(function () {
          return $(this).attr("type");
        })
        .get()
        .join(", ");
    }

    return {
      added: $sig.find("added").text(),
      return: ret,
      arguments: $sig
        .find("> argument")
        .map(function () {
          const $arg = $(this);
          let name = $arg.attr("name");
          let type = $arg.attr("type");

          if (!type) {
            type = $arg
              .find("type")
              .map(function () {
                return $(this).attr("name");
              })
              .get()
              .join(", ");
          }

          if (name === "function") {
            const funcArgs = $arg
              .find("> argument")
              .map(function () {
                const $cbArg = $(this);

                return `${$cbArg.attr(
                  "name"
                )}<span class="type">${$cbArg.attr("type")}</span>`;
              })
              .get()
              .join(", ");

            name = `${name}(${funcArgs})`;
          }

          return {
            name,
            type,
            desc: $arg.find("desc").html(),
          };
        })
        .get(),
    };
  })
  .get();

function getSignatureTitle(signature) {
  const fullName = name.includes("jQuery.") ? name : `.${name}`;
  const args = signature.arguments.map((arg) => arg.name).join(", ");
  const fullReturns = signature.return?.length
    ? `<span class="return">&#129122; ${signature.return}</span>`
    : "";

  return `${fullName}(${args})${fullReturns}`;
}
---

<div id="signatures">
  {
    signatures.map((signature) => (
      <>
        <h4 class="title is-4">
          <Fragment set:html={getSignatureTitle(signature)} />
        </h4>

        <table class="table is-striped is-bordered is-fullwidth">
          <tbody>
            {signature.arguments.map((argument) => (
              <tr>
                <td>
                  <code>
                    <Fragment set:html={argument.name} />
                  </code>
                </td>
                <td>{argument.type}</td>
                <td>
                  <Fragment set:html={argument.desc} />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </>
    ))
  }
</div>
