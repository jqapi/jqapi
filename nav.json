[
  {
    "name": "Ajax",
    "slug": "ajax",
    "entries": [],
    "categories": [
      {
        "name": "Global Ajax Event Handlers",
        "slug": "global-ajax-event-handlers",
        "entries": [
          {
            "name": "ajaxComplete",
            "desc": "The function to be invoked."
          },
          {
            "name": "ajaxError",
            "desc": "The function to be invoked."
          },
          {
            "name": "ajaxSend",
            "desc": "The function to be invoked."
          },
          {
            "name": "ajaxStart",
            "desc": "The function to be invoked."
          },
          {
            "name": "ajaxStop",
            "desc": "Register a handler to be called when all Ajax requests have completed. This is an <a href=\"/Ajax_Events/\">Ajax Event</a>."
          },
          {
            "name": "ajaxSuccess",
            "desc": "The function to be invoked."
          }
        ]
      },
      {
        "name": "Helper Functions",
        "slug": "helper-functions",
        "entries": [
          {
            "name": "jQuery.param",
            "desc": "An array, a plain object, or a jQuery object to serialize."
          },
          {
            "name": "serialize",
            "desc": "Encode a set of form elements as a string for submission."
          },
          {
            "name": "serializeArray",
            "desc": "Encode a set of form elements as an array of names and values."
          }
        ]
      },
      {
        "name": "Low-Level Interface",
        "slug": "low-level-interface",
        "entries": [
          {
            "name": "jQuery.ajax",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.ajaxPrefilter",
            "desc": "Handle custom Ajax options or modify existing options before each request is sent and before they are processed by <code>$.ajax()</code>."
          },
          {
            "name": "jQuery.ajaxSetup",
            "desc": "A set of key/value pairs that configure the default Ajax request. All options are optional."
          },
          {
            "name": "jQuery.ajaxTransport",
            "desc": "Creates an object that handles the actual transmission of Ajax data."
          }
        ]
      },
      {
        "name": "Shorthand Methods",
        "slug": "shorthand-methods",
        "entries": [
          {
            "name": "jQuery.get",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.getJSON",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.getScript",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.post",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "load",
            "desc": "A string containing the URL to which the request is sent."
          }
        ]
      }
    ]
  },
  {
    "name": "Attributes",
    "slug": "attributes",
    "entries": [
      {
        "name": "addClass",
        "desc": "One or more space-separated classes to be added to the class attribute of each matched element."
      },
      {
        "name": "attr",
        "desc": "Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element."
      },
      {
        "name": "hasClass",
        "desc": "The class name to search for."
      },
      {
        "name": "html",
        "desc": "Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element."
      },
      {
        "name": "prop",
        "desc": "Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element."
      },
      {
        "name": "removeAttr",
        "desc": "An attribute to remove; as of version 1.7, it can be a space-separated list of attributes."
      },
      {
        "name": "removeClass",
        "desc": "Remove a single class, multiple classes, or all classes from each element in the set of matched elements."
      },
      {
        "name": "removeProp",
        "desc": "The name of the property to remove."
      },
      {
        "name": "toggleClass",
        "desc": "One or more classes (separated by spaces) to be toggled for each element in the matched set."
      },
      {
        "name": "val",
        "desc": "Get the current value of the first element in the set of matched elements or set the value of every matched element."
      }
    ],
    "categories": []
  },
  {
    "name": "Callbacks Object",
    "slug": "callbacks-object",
    "entries": [
      {
        "name": "callbacks.add",
        "desc": "A function, or array of functions, that are to be added to the callback list."
      },
      {
        "name": "callbacks.disable",
        "desc": "Disable a callback list from doing anything more."
      },
      {
        "name": "callbacks.disabled",
        "desc": "Determine if the callbacks list has been disabled."
      },
      {
        "name": "callbacks.empty",
        "desc": "Remove all of the callbacks from a list."
      },
      {
        "name": "callbacks.fire",
        "desc": "The argument or list of arguments to pass back to the callback list."
      },
      {
        "name": "callbacks.fireWith",
        "desc": "A reference to the context in which the callbacks in the list should be fired."
      },
      {
        "name": "callbacks.fired",
        "desc": "Determine if the callbacks have already been called at least once."
      },
      {
        "name": "callbacks.has",
        "desc": "The callback to search for."
      },
      {
        "name": "callbacks.lock",
        "desc": "Lock a callback list in its current state."
      },
      {
        "name": "callbacks.locked",
        "desc": "Determine if the callbacks list has been locked."
      },
      {
        "name": "callbacks.remove",
        "desc": "A function, or array of functions, that are to be removed from the callback list."
      },
      {
        "name": "jQuery.Callbacks",
        "desc": "An optional list of space-separated flags that change how the callback list behaves."
      }
    ],
    "categories": []
  },
  {
    "name": "Core",
    "slug": "core",
    "entries": [
      {
        "name": "jQuery.holdReady",
        "desc": "Holds or releases the execution of jQuery's ready event."
      },
      {
        "name": "jQuery.noConflict",
        "desc": "A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself)."
      },
      {
        "name": "jQuery.ready",
        "desc": "A Promise-like object (or \"thenable\") that resolves when the document is ready."
      },
      {
        "name": "jQuery.readyException",
        "desc": "Handles errors thrown synchronously in functions wrapped in <code>jQuery()</code>."
      },
      {
        "name": "jQuery.sub",
        "desc": "Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object."
      },
      {
        "name": "jQuery.when",
        "desc": "Zero or more Thenable objects."
      },
      {
        "name": "jQuery",
        "desc": "Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string."
      }
    ],
    "categories": []
  },
  {
    "name": "CSS",
    "slug": "css",
    "entries": [
      {
        "name": "addClass",
        "desc": "One or more space-separated classes to be added to the class attribute of each matched element."
      },
      {
        "name": "css",
        "desc": "Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element."
      },
      {
        "name": "hasClass",
        "desc": "The class name to search for."
      },
      {
        "name": "height",
        "desc": "Get the current computed height for the first element in the set of matched elements or set the height of every matched element."
      },
      {
        "name": "innerHeight",
        "desc": "Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element."
      },
      {
        "name": "innerWidth",
        "desc": "Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element."
      },
      {
        "name": "jQuery.cssHooks",
        "desc": "Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties."
      },
      {
        "name": "jQuery.cssNumber",
        "desc": "An object containing all CSS properties that may be used without a unit. The <a href=\"/css/\"><code>.css()</code></a> method uses this object to see if it may append <code>px</code> to unitless values."
      },
      {
        "name": "jQuery.escapeSelector",
        "desc": "Escapes any character that has a special meaning in a CSS selector."
      },
      {
        "name": "offset",
        "desc": "Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document."
      },
      {
        "name": "outerHeight",
        "desc": "Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element."
      },
      {
        "name": "outerWidth",
        "desc": "Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element."
      },
      {
        "name": "position",
        "desc": "Get the current coordinates of the first element in the set of matched elements, relative to the offset parent."
      },
      {
        "name": "removeClass",
        "desc": "Remove a single class, multiple classes, or all classes from each element in the set of matched elements."
      },
      {
        "name": "scrollLeft",
        "desc": "Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element."
      },
      {
        "name": "scrollTop",
        "desc": "Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element."
      },
      {
        "name": "toggleClass",
        "desc": "One or more classes (separated by spaces) to be toggled for each element in the matched set."
      },
      {
        "name": "width",
        "desc": "Get the current computed width for the first element in the set of matched elements or set the width of every matched element."
      }
    ],
    "categories": []
  },
  {
    "name": "Data",
    "slug": "data",
    "entries": [
      {
        "name": "clearQueue",
        "desc": "A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue."
      },
      {
        "name": "data",
        "desc": "Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements."
      },
      {
        "name": "dequeue",
        "desc": "A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue."
      },
      {
        "name": "jQuery.data",
        "desc": "Store arbitrary data associated with the specified element and/or return the value that was set."
      },
      {
        "name": "jQuery.dequeue",
        "desc": "A DOM element from which to remove and execute a queued function."
      },
      {
        "name": "jQuery.hasData",
        "desc": "A DOM element to be checked for data."
      },
      {
        "name": "jQuery.queue",
        "desc": "Show or manipulate the queue of functions to be executed on the matched element."
      },
      {
        "name": "jQuery.removeData",
        "desc": "A DOM element from which to remove data."
      },
      {
        "name": "queue",
        "desc": "Show or manipulate the queue of functions to be executed on the matched elements."
      },
      {
        "name": "removeData",
        "desc": "A string naming the piece of data to delete."
      }
    ],
    "categories": []
  },
  {
    "name": "Deferred Object",
    "slug": "deferred-object",
    "entries": [
      {
        "name": "deferred.always",
        "desc": "A function, or array of functions, that is called when the Deferred is resolved or rejected."
      },
      {
        "name": "deferred.catch",
        "desc": "A function that is called when the Deferred is rejected."
      },
      {
        "name": "deferred.done",
        "desc": "A function, or array of functions, that are called when the Deferred is resolved."
      },
      {
        "name": "deferred.fail",
        "desc": "A function, or array of functions, that are called when the Deferred is rejected."
      },
      {
        "name": "deferred.isRejected",
        "desc": "Determine whether a Deferred object has been rejected."
      },
      {
        "name": "deferred.isResolved",
        "desc": "Determine whether a Deferred object has been resolved."
      },
      {
        "name": "deferred.notify",
        "desc": "Optional arguments that are passed to the progressCallbacks."
      },
      {
        "name": "deferred.notifyWith",
        "desc": "Context passed to the progressCallbacks as the <code>this</code> object."
      },
      {
        "name": "deferred.pipe",
        "desc": "An optional function that is called when the Deferred is resolved."
      },
      {
        "name": "deferred.progress",
        "desc": "A function, or array of functions, to be called when the Deferred generates progress notifications."
      },
      {
        "name": "deferred.promise",
        "desc": "Object onto which the promise methods have to be attached"
      },
      {
        "name": "deferred.reject",
        "desc": "Optional arguments that are passed to the failCallbacks."
      },
      {
        "name": "deferred.rejectWith",
        "desc": "Context passed to the failCallbacks as the <code>this</code> object."
      },
      {
        "name": "deferred.resolve",
        "desc": "Optional arguments that are passed to the doneCallbacks."
      },
      {
        "name": "deferred.resolveWith",
        "desc": "Context passed to the doneCallbacks as the <code>this</code> object."
      },
      {
        "name": "deferred.state",
        "desc": "Determine the current state of a Deferred object."
      },
      {
        "name": "deferred.then",
        "desc": "A function that is called when the Deferred is resolved."
      },
      {
        "name": "jQuery.Deferred",
        "desc": "A function that is called just before the constructor returns."
      },
      {
        "name": "jQuery.when",
        "desc": "Zero or more Thenable objects."
      },
      {
        "name": "promise",
        "desc": "The type of queue that needs to be observed."
      }
    ],
    "categories": []
  },
  {
    "name": "Deprecated",
    "slug": "deprecated",
    "entries": [],
    "categories": [
      {
        "name": "Deprecated 1.3",
        "slug": "deprecated-1.3",
        "entries": [
          {
            "name": "jQuery.boxModel",
            "desc": "States if the current page, in the user's browser, is being rendered using the <a href=\"https://www.w3.org/TR/REC-CSS2/box.html\">W3C CSS Box Model</a>."
          },
          {
            "name": "jQuery.browser",
            "desc": "Contains flags for the useragent, read from navigator.userAgent. <strong>This property was removed in jQuery 1.9</strong> and is available only through the jQuery.migrate plugin. Please try to use feature detection instead."
          }
        ]
      },
      {
        "name": "Deprecated 1.4",
        "slug": "deprecated-1.4",
        "entries": []
      },
      {
        "name": "Deprecated 1.7",
        "slug": "deprecated-1.7",
        "entries": [
          {
            "name": "deferred.isRejected",
            "desc": "Determine whether a Deferred object has been rejected."
          },
          {
            "name": "deferred.isResolved",
            "desc": "Determine whether a Deferred object has been resolved."
          },
          {
            "name": "die",
            "desc": "Remove event handlers previously attached using <code>.live()</code> from the elements."
          },
          {
            "name": "jQuery.sub",
            "desc": "Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object."
          },
          {
            "name": "live",
            "desc": "Attach an event handler for all elements which match the current selector, now and in the future."
          },
          {
            "name": "selector",
            "desc": "A selector representing selector passed to jQuery(), if any, when creating the original set."
          }
        ]
      },
      {
        "name": "Deprecated 1.8",
        "slug": "deprecated-1.8",
        "entries": [
          {
            "name": "andSelf",
            "desc": "Add the previous set of elements on the stack to the current set."
          },
          {
            "name": "deferred.pipe",
            "desc": "An optional function that is called when the Deferred is resolved."
          },
          {
            "name": "error",
            "desc": "Bind an event handler to the \"error\" JavaScript event."
          },
          {
            "name": "load",
            "desc": "Bind an event handler to the \"load\" JavaScript event."
          },
          {
            "name": "size",
            "desc": "Return the number of elements in the jQuery object."
          },
          {
            "name": "toggle",
            "desc": "Bind two or more handlers to the matched elements, to be executed on alternate clicks."
          },
          {
            "name": "unload",
            "desc": "A function to execute when the event is triggered."
          }
        ]
      },
      {
        "name": "Deprecated 1.9",
        "slug": "deprecated-1.9",
        "entries": [
          {
            "name": "jQuery.support",
            "desc": "A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project's feature-detection needs, we strongly recommend the use of an external library such as <a href=\"https://modernizr.com\">Modernizr</a> instead of dependency on properties in <code>jQuery.support</code>."
          }
        ]
      },
      {
        "name": "Deprecated 1.10",
        "slug": "deprecated-1.10",
        "entries": [
          {
            "name": "context",
            "desc": "The DOM node context originally passed to <code>jQuery()</code>; if none was passed then context will likely be the document."
          }
        ]
      },
      {
        "name": "Deprecated 3.0",
        "slug": "deprecated-3.0",
        "entries": [
          {
            "name": "bind",
            "desc": "A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names."
          },
          {
            "name": "delegate",
            "desc": "Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements."
          },
          {
            "name": "jQuery.fx.interval",
            "desc": "The rate (in milliseconds) at which animations fire."
          },
          {
            "name": "jQuery.parseJSON",
            "desc": "The JSON string to parse."
          },
          {
            "name": "jQuery.unique",
            "desc": "The Array of DOM elements."
          },
          {
            "name": "toggleClass",
            "desc": "One or more classes (separated by spaces) to be toggled for each element in the matched set."
          },
          {
            "name": "unbind",
            "desc": "Remove a previously-attached event handler from the elements."
          },
          {
            "name": "undelegate",
            "desc": "Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements."
          }
        ]
      },
      {
        "name": "Deprecated 3.2",
        "slug": "deprecated-3.2",
        "entries": [
          {
            "name": "jQuery.holdReady",
            "desc": "Holds or releases the execution of jQuery's ready event."
          },
          {
            "name": "jQuery.isArray",
            "desc": "Object to test whether or not it is an array."
          }
        ]
      },
      {
        "name": "Deprecated 3.3",
        "slug": "deprecated-3.3",
        "entries": [
          {
            "name": "jQuery.isFunction",
            "desc": "The value to be tested."
          },
          {
            "name": "jQuery.isNumeric",
            "desc": "Determines whether its argument represents a JavaScript number."
          },
          {
            "name": "jQuery.isWindow",
            "desc": "Object to test whether or not it is a window."
          },
          {
            "name": "jQuery.now",
            "desc": "Return a number representing the current time."
          },
          {
            "name": "jQuery.proxy",
            "desc": "The function whose context will be changed."
          },
          {
            "name": "jQuery.type",
            "desc": "Object to get the internal JavaScript [[Class]] of."
          }
        ]
      },
      {
        "name": "Deprecated 3.4",
        "slug": "deprecated-3.4",
        "entries": [
          {
            "name": "eq",
            "desc": "Zero-based index of the element to match."
          },
          {
            "name": "even",
            "desc": "Selects even elements, zero-indexed.  See also <a href=\"/odd-selector/\"><code>:odd</code></a>."
          },
          {
            "name": "first",
            "desc": "Selects the first matched DOM element."
          },
          {
            "name": "gt",
            "desc": "Zero-based index."
          },
          {
            "name": "last",
            "desc": "Selects the last matched element."
          },
          {
            "name": "lt",
            "desc": "Zero-based index."
          },
          {
            "name": "odd",
            "desc": "Selects odd elements, zero-indexed.  See also <a href=\"/even-selector/\"><code>:even</code></a>."
          }
        ]
      },
      {
        "name": "Deprecated 3.5",
        "slug": "deprecated-3.5",
        "entries": [
          {
            "name": "jQuery.trim",
            "desc": "The string to trim."
          }
        ]
      }
    ]
  },
  {
    "name": "Dimensions",
    "slug": "dimensions",
    "entries": [
      {
        "name": "height",
        "desc": "Get the current computed height for the first element in the set of matched elements or set the height of every matched element."
      },
      {
        "name": "innerHeight",
        "desc": "Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element."
      },
      {
        "name": "innerWidth",
        "desc": "Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element."
      },
      {
        "name": "outerHeight",
        "desc": "Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element."
      },
      {
        "name": "outerWidth",
        "desc": "Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element."
      },
      {
        "name": "width",
        "desc": "Get the current computed width for the first element in the set of matched elements or set the width of every matched element."
      }
    ],
    "categories": []
  },
  {
    "name": "Effects",
    "slug": "effects",
    "entries": [
      {
        "name": "fadeToggle",
        "desc": "Display or hide the matched elements by animating their opacity."
      }
    ],
    "categories": [
      {
        "name": "Basics",
        "slug": "basics",
        "entries": [
          {
            "name": "hide",
            "desc": "Hide the matched elements."
          },
          {
            "name": "show",
            "desc": "Display the matched elements."
          },
          {
            "name": "toggle",
            "desc": "Display or hide the matched elements."
          }
        ]
      },
      {
        "name": "Custom",
        "slug": "custom-effects",
        "entries": [
          {
            "name": "animate",
            "desc": "Perform a custom animation of a set of CSS properties."
          },
          {
            "name": "clearQueue",
            "desc": "A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue."
          },
          {
            "name": "delay",
            "desc": "An integer indicating the number of milliseconds to delay execution of the next item in the queue."
          },
          {
            "name": "dequeue",
            "desc": "A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue."
          },
          {
            "name": "finish",
            "desc": "Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements."
          },
          {
            "name": "jQuery.fx.interval",
            "desc": "The rate (in milliseconds) at which animations fire."
          },
          {
            "name": "jQuery.fx.off",
            "desc": "Globally disable all animations."
          },
          {
            "name": "jQuery.speed",
            "desc": "Creates an object containing a set of properties ready to be used in the definition of custom animations."
          },
          {
            "name": "queue",
            "desc": "Show or manipulate the queue of functions to be executed on the matched elements."
          },
          {
            "name": "stop",
            "desc": "Stop the currently-running animation on the matched elements."
          }
        ]
      },
      {
        "name": "Fading",
        "slug": "fading",
        "entries": [
          {
            "name": "fadeIn",
            "desc": "Display the matched elements by fading them to opaque."
          },
          {
            "name": "fadeOut",
            "desc": "Hide the matched elements by fading them to transparent."
          },
          {
            "name": "fadeTo",
            "desc": "Adjust the opacity of the matched elements."
          },
          {
            "name": "fadeToggle",
            "desc": "Display or hide the matched elements by animating their opacity."
          }
        ]
      },
      {
        "name": "Sliding",
        "slug": "sliding",
        "entries": [
          {
            "name": "slideDown",
            "desc": "Display the matched elements with a sliding motion."
          },
          {
            "name": "slideToggle",
            "desc": "Display or hide the matched elements with a sliding motion."
          },
          {
            "name": "slideUp",
            "desc": "Hide the matched elements with a sliding motion."
          }
        ]
      }
    ]
  },
  {
    "name": "Events",
    "slug": "events",
    "entries": [
      {
        "name": "event.delegateTarget",
        "desc": "The element where the currently-called jQuery event handler was attached."
      }
    ],
    "categories": [
      {
        "name": "Browser Events",
        "slug": "browser-events",
        "entries": [
          {
            "name": "error",
            "desc": "Bind an event handler to the \"error\" JavaScript event."
          },
          {
            "name": "resize",
            "desc": "Bind an event handler to the \"resize\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "scroll",
            "desc": "Bind an event handler to the \"scroll\" JavaScript event, or trigger that event on an element."
          }
        ]
      },
      {
        "name": "Document Loading",
        "slug": "document-loading",
        "entries": [
          {
            "name": "jQuery.holdReady",
            "desc": "Holds or releases the execution of jQuery's ready event."
          },
          {
            "name": "jQuery.ready",
            "desc": "A Promise-like object (or \"thenable\") that resolves when the document is ready."
          },
          {
            "name": "load",
            "desc": "Bind an event handler to the \"load\" JavaScript event."
          },
          {
            "name": "ready",
            "desc": "Specify a function to execute when the DOM is fully loaded."
          },
          {
            "name": "unload",
            "desc": "A function to execute when the event is triggered."
          }
        ]
      },
      {
        "name": "Event Handler Attachment",
        "slug": "event-handler-attachment",
        "entries": [
          {
            "name": "bind",
            "desc": "A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names."
          },
          {
            "name": "delegate",
            "desc": "Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements."
          },
          {
            "name": "die",
            "desc": "Remove event handlers previously attached using <code>.live()</code> from the elements."
          },
          {
            "name": "jQuery.proxy",
            "desc": "The function whose context will be changed."
          },
          {
            "name": "live",
            "desc": "Attach an event handler for all elements which match the current selector, now and in the future."
          },
          {
            "name": "off",
            "desc": "Remove an event handler."
          },
          {
            "name": "on",
            "desc": "Attach an event handler function for one or more events to the selected elements."
          },
          {
            "name": "one",
            "desc": "Attach a handler to an event for the elements. The handler is executed at most once per element per event type."
          },
          {
            "name": "trigger",
            "desc": "Execute all handlers and behaviors attached to the matched elements for the given event type."
          },
          {
            "name": "triggerHandler",
            "desc": "Execute all handlers attached to an element for an event."
          },
          {
            "name": "unbind",
            "desc": "Remove a previously-attached event handler from the elements."
          },
          {
            "name": "undelegate",
            "desc": "Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements."
          }
        ]
      },
      {
        "name": "Event Object",
        "slug": "event-object",
        "entries": [
          {
            "name": "event.currentTarget",
            "desc": "The current DOM element within the event bubbling phase."
          },
          {
            "name": "event.data",
            "desc": "An optional object of data passed to an event method when the current executing handler is bound."
          },
          {
            "name": "event.delegateTarget",
            "desc": "The element where the currently-called jQuery event handler was attached."
          },
          {
            "name": "event.isDefaultPrevented",
            "desc": "Returns whether <a href=\"/event.preventDefault/\">event.preventDefault()</a> was ever called on this event object."
          },
          {
            "name": "event.isImmediatePropagationStopped",
            "desc": "Returns whether event.stopImmediatePropagation() was ever called on this event object."
          },
          {
            "name": "event.isPropagationStopped",
            "desc": "Returns whether <a href=\"/event.stopPropagation/\">event.stopPropagation()</a> was ever called on this event object."
          },
          {
            "name": "event.metaKey",
            "desc": "Indicates whether the META key was pressed when the event fired."
          },
          {
            "name": "event.namespace",
            "desc": "The namespace specified when the event was triggered."
          },
          {
            "name": "event.pageX",
            "desc": "The mouse position relative to the left edge of the document."
          },
          {
            "name": "event.pageY",
            "desc": "The mouse position relative to the top edge of the document."
          },
          {
            "name": "event.preventDefault",
            "desc": "If this method is called, the default action of the event will not be triggered."
          },
          {
            "name": "event.relatedTarget",
            "desc": "The other DOM element involved in the event, if any."
          },
          {
            "name": "event.result",
            "desc": "The last value returned by an event handler that was triggered by this event, unless the value was <code>undefined</code>."
          },
          {
            "name": "event.stopImmediatePropagation",
            "desc": "Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree."
          },
          {
            "name": "event.stopPropagation",
            "desc": "Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event."
          },
          {
            "name": "event.target",
            "desc": "The DOM element that initiated the event."
          },
          {
            "name": "event.timeStamp",
            "desc": "The difference in milliseconds between the time the browser created the event and January 1, 1970."
          },
          {
            "name": "event.type",
            "desc": "Describes the nature of the event."
          },
          {
            "name": "event.which",
            "desc": "For key or mouse events, this property indicates the specific key or button that was pressed."
          }
        ]
      },
      {
        "name": "Form Events",
        "slug": "form-events",
        "entries": [
          {
            "name": "blur",
            "desc": "Bind an event handler to the \"blur\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "change",
            "desc": "Bind an event handler to the \"change\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "focus",
            "desc": "Bind an event handler to the \"focus\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "focusin",
            "desc": "Bind an event handler to the \"focusin\" event."
          },
          {
            "name": "focusout",
            "desc": "Bind an event handler to the \"focusout\" JavaScript event."
          },
          {
            "name": "select",
            "desc": "Bind an event handler to the \"select\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "submit",
            "desc": "Bind an event handler to the \"submit\" JavaScript event, or trigger that event on an element."
          }
        ]
      },
      {
        "name": "Keyboard Events",
        "slug": "keyboard-events",
        "entries": [
          {
            "name": "keydown",
            "desc": "A function to execute each time the event is triggered."
          },
          {
            "name": "keypress",
            "desc": "Bind an event handler to the \"keypress\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "keyup",
            "desc": "Bind an event handler to the \"keyup\" JavaScript event, or trigger that event on an element."
          }
        ]
      },
      {
        "name": "Mouse Events",
        "slug": "mouse-events",
        "entries": [
          {
            "name": "click",
            "desc": "Bind an event handler to the \"click\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "contextmenu",
            "desc": "Bind an event handler to the \"contextmenu\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "dblclick",
            "desc": "Bind an event handler to the \"dblclick\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "hover",
            "desc": "Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements."
          },
          {
            "name": "mousedown",
            "desc": "Bind an event handler to the \"mousedown\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseenter",
            "desc": "Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element."
          },
          {
            "name": "mouseleave",
            "desc": "Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element."
          },
          {
            "name": "mousemove",
            "desc": "Bind an event handler to the \"mousemove\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseout",
            "desc": "Bind an event handler to the \"mouseout\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseover",
            "desc": "Bind an event handler to the \"mouseover\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseup",
            "desc": "Bind an event handler to the \"mouseup\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "toggle",
            "desc": "Bind two or more handlers to the matched elements, to be executed on alternate clicks."
          }
        ]
      }
    ]
  },
  {
    "name": "Forms",
    "slug": "forms",
    "entries": [
      {
        "name": "blur",
        "desc": "Bind an event handler to the \"blur\" JavaScript event, or trigger that event on an element."
      },
      {
        "name": "change",
        "desc": "Bind an event handler to the \"change\" JavaScript event, or trigger that event on an element."
      },
      {
        "name": "focus",
        "desc": "Bind an event handler to the \"focus\" JavaScript event, or trigger that event on an element."
      },
      {
        "name": "focusin",
        "desc": "Bind an event handler to the \"focusin\" event."
      },
      {
        "name": "focusout",
        "desc": "Bind an event handler to the \"focusout\" JavaScript event."
      },
      {
        "name": "jQuery.param",
        "desc": "An array, a plain object, or a jQuery object to serialize."
      },
      {
        "name": "select",
        "desc": "Bind an event handler to the \"select\" JavaScript event, or trigger that event on an element."
      },
      {
        "name": "serialize",
        "desc": "Encode a set of form elements as a string for submission."
      },
      {
        "name": "serializeArray",
        "desc": "Encode a set of form elements as an array of names and values."
      },
      {
        "name": "submit",
        "desc": "Bind an event handler to the \"submit\" JavaScript event, or trigger that event on an element."
      },
      {
        "name": "val",
        "desc": "Get the current value of the first element in the set of matched elements or set the value of every matched element."
      }
    ],
    "categories": []
  },
  {
    "name": "Internals",
    "slug": "internals",
    "entries": [
      {
        "name": "context",
        "desc": "The DOM node context originally passed to <code>jQuery()</code>; if none was passed then context will likely be the document."
      },
      {
        "name": "jQuery.error",
        "desc": "The message to send out."
      },
      {
        "name": "jquery",
        "desc": "A string containing the jQuery version number."
      },
      {
        "name": "pushStack",
        "desc": "An array of elements to push onto the stack and make into a new jQuery object."
      },
      {
        "name": "selector",
        "desc": "A selector representing selector passed to jQuery(), if any, when creating the original set."
      }
    ],
    "categories": []
  },
  {
    "name": "Manipulation",
    "slug": "manipulation",
    "entries": [
      {
        "name": "jQuery.htmlPrefilter",
        "desc": "Modify and filter HTML strings passed through <a href=\"/category/manipulation/\">jQuery manipulation methods</a>."
      }
    ],
    "categories": [
      {
        "name": "Class Attribute",
        "slug": "class-attribute",
        "entries": [
          {
            "name": "addClass",
            "desc": "One or more space-separated classes to be added to the class attribute of each matched element."
          },
          {
            "name": "hasClass",
            "desc": "The class name to search for."
          },
          {
            "name": "removeClass",
            "desc": "Remove a single class, multiple classes, or all classes from each element in the set of matched elements."
          },
          {
            "name": "toggleClass",
            "desc": "One or more classes (separated by spaces) to be toggled for each element in the matched set."
          }
        ]
      },
      {
        "name": "Copying",
        "slug": "copying",
        "entries": [
          {
            "name": "clone",
            "desc": "A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well."
          }
        ]
      },
      {
        "name": "DOM Insertion",
        "slug": "dom-insertion",
        "entries": []
      },
      {
        "name": "DOM Insertion, Around",
        "slug": "dom-insertion-around",
        "entries": [
          {
            "name": "unwrap",
            "desc": "A selector to check the parent element against. If an element's parent does not match the selector, the element won't be unwrapped."
          },
          {
            "name": "wrap",
            "desc": "A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. When you pass a jQuery collection containing more than one element, or a selector matching more than one element, the first element will be used."
          },
          {
            "name": "wrapAll",
            "desc": "A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements."
          },
          {
            "name": "wrapInner",
            "desc": "An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements."
          }
        ]
      },
      {
        "name": "DOM Insertion, Inside",
        "slug": "dom-insertion-inside",
        "entries": [
          {
            "name": "append",
            "desc": "DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the end of each element in the set of matched elements."
          },
          {
            "name": "appendTo",
            "desc": "A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter."
          },
          {
            "name": "html",
            "desc": "Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element."
          },
          {
            "name": "prepend",
            "desc": "DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements."
          },
          {
            "name": "prependTo",
            "desc": "A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter."
          },
          {
            "name": "text",
            "desc": "Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements."
          }
        ]
      },
      {
        "name": "DOM Insertion, Outside",
        "slug": "dom-insertion-outside",
        "entries": [
          {
            "name": "after",
            "desc": "HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert after each element in the set of matched elements."
          },
          {
            "name": "before",
            "desc": "HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert before each element in the set of matched elements."
          },
          {
            "name": "insertAfter",
            "desc": "A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter."
          },
          {
            "name": "insertBefore",
            "desc": "A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter."
          }
        ]
      },
      {
        "name": "DOM Removal",
        "slug": "dom-removal",
        "entries": [
          {
            "name": "detach",
            "desc": "A selector expression that filters the set of matched elements to be removed."
          },
          {
            "name": "empty",
            "desc": "Remove all child nodes of the set of matched elements from the DOM."
          },
          {
            "name": "remove",
            "desc": "A selector expression that filters the set of matched elements to be removed."
          },
          {
            "name": "unwrap",
            "desc": "A selector to check the parent element against. If an element's parent does not match the selector, the element won't be unwrapped."
          }
        ]
      },
      {
        "name": "DOM Replacement",
        "slug": "dom-replacement",
        "entries": [
          {
            "name": "replaceAll",
            "desc": "A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace."
          },
          {
            "name": "replaceWith",
            "desc": "The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object."
          }
        ]
      },
      {
        "name": "General Attributes",
        "slug": "general-attributes",
        "entries": [
          {
            "name": "attr",
            "desc": "Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element."
          },
          {
            "name": "prop",
            "desc": "Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element."
          },
          {
            "name": "removeAttr",
            "desc": "An attribute to remove; as of version 1.7, it can be a space-separated list of attributes."
          },
          {
            "name": "removeProp",
            "desc": "The name of the property to remove."
          },
          {
            "name": "val",
            "desc": "Get the current value of the first element in the set of matched elements or set the value of every matched element."
          }
        ]
      },
      {
        "name": "Style Properties",
        "slug": "style-properties",
        "entries": [
          {
            "name": "css",
            "desc": "Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element."
          },
          {
            "name": "height",
            "desc": "Get the current computed height for the first element in the set of matched elements or set the height of every matched element."
          },
          {
            "name": "innerHeight",
            "desc": "Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element."
          },
          {
            "name": "innerWidth",
            "desc": "Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element."
          },
          {
            "name": "jQuery.cssNumber",
            "desc": "An object containing all CSS properties that may be used without a unit. The <a href=\"/css/\"><code>.css()</code></a> method uses this object to see if it may append <code>px</code> to unitless values."
          },
          {
            "name": "offset",
            "desc": "Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document."
          },
          {
            "name": "outerHeight",
            "desc": "Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element."
          },
          {
            "name": "outerWidth",
            "desc": "Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element."
          },
          {
            "name": "position",
            "desc": "Get the current coordinates of the first element in the set of matched elements, relative to the offset parent."
          },
          {
            "name": "scrollLeft",
            "desc": "Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element."
          },
          {
            "name": "scrollTop",
            "desc": "Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element."
          },
          {
            "name": "width",
            "desc": "Get the current computed width for the first element in the set of matched elements or set the width of every matched element."
          }
        ]
      }
    ]
  },
  {
    "name": "Miscellaneous",
    "slug": "miscellaneous",
    "entries": [],
    "categories": [
      {
        "name": "Collection Manipulation",
        "slug": "collection-manipulation",
        "entries": [
          {
            "name": "each",
            "desc": "A function to execute for each matched element."
          },
          {
            "name": "jQuery.param",
            "desc": "An array, a plain object, or a jQuery object to serialize."
          }
        ]
      },
      {
        "name": "Data Storage",
        "slug": "data-storage",
        "entries": [
          {
            "name": "data",
            "desc": "Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements."
          },
          {
            "name": "removeData",
            "desc": "A string naming the piece of data to delete."
          }
        ]
      },
      {
        "name": "DOM Element Methods",
        "slug": "dom-element-methods",
        "entries": [
          {
            "name": "get",
            "desc": "Retrieve the DOM elements matched by the jQuery object."
          },
          {
            "name": "index",
            "desc": "A selector representing a jQuery collection in which to look for an element."
          },
          {
            "name": "size",
            "desc": "Return the number of elements in the jQuery object."
          },
          {
            "name": "toArray",
            "desc": "Retrieve all the elements contained in the jQuery set, as an array."
          }
        ]
      },
      {
        "name": "Setup Methods",
        "slug": "setup-methods",
        "entries": [
          {
            "name": "jQuery.noConflict",
            "desc": "A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself)."
          }
        ]
      }
    ]
  },
  {
    "name": "Offset",
    "slug": "offset",
    "entries": [
      {
        "name": "offset",
        "desc": "Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document."
      },
      {
        "name": "offsetParent",
        "desc": "Get the closest ancestor element that is positioned."
      },
      {
        "name": "position",
        "desc": "Get the current coordinates of the first element in the set of matched elements, relative to the offset parent."
      },
      {
        "name": "scrollLeft",
        "desc": "Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element."
      },
      {
        "name": "scrollTop",
        "desc": "Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element."
      }
    ],
    "categories": []
  },
  {
    "name": "Properties",
    "slug": "properties",
    "entries": [],
    "categories": [
      {
        "name": "Properties of jQuery Object Instances",
        "slug": "jquery-object-instance-properties",
        "entries": [
          {
            "name": "context",
            "desc": "The DOM node context originally passed to <code>jQuery()</code>; if none was passed then context will likely be the document."
          },
          {
            "name": "jquery",
            "desc": "A string containing the jQuery version number."
          },
          {
            "name": "length",
            "desc": "The number of elements in the jQuery object."
          },
          {
            "name": "selector",
            "desc": "A selector representing selector passed to jQuery(), if any, when creating the original set."
          }
        ]
      },
      {
        "name": "Properties of the Global jQuery Object",
        "slug": "global-jquery-object-properties",
        "entries": [
          {
            "name": "jQuery.browser",
            "desc": "Contains flags for the useragent, read from navigator.userAgent. <strong>This property was removed in jQuery 1.9</strong> and is available only through the jQuery.migrate plugin. Please try to use feature detection instead."
          },
          {
            "name": "jQuery.fx.interval",
            "desc": "The rate (in milliseconds) at which animations fire."
          },
          {
            "name": "jQuery.fx.off",
            "desc": "Globally disable all animations."
          },
          {
            "name": "jQuery.holdReady",
            "desc": "Holds or releases the execution of jQuery's ready event."
          },
          {
            "name": "jQuery.ready",
            "desc": "A Promise-like object (or \"thenable\") that resolves when the document is ready."
          },
          {
            "name": "jQuery.support",
            "desc": "A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project's feature-detection needs, we strongly recommend the use of an external library such as <a href=\"https://modernizr.com\">Modernizr</a> instead of dependency on properties in <code>jQuery.support</code>."
          }
        ]
      }
    ]
  },
  {
    "name": "Removed",
    "slug": "removed",
    "entries": [
      {
        "name": "andSelf",
        "desc": "Add the previous set of elements on the stack to the current set."
      },
      {
        "name": "context",
        "desc": "The DOM node context originally passed to <code>jQuery()</code>; if none was passed then context will likely be the document."
      },
      {
        "name": "deferred.isRejected",
        "desc": "Determine whether a Deferred object has been rejected."
      },
      {
        "name": "deferred.isResolved",
        "desc": "Determine whether a Deferred object has been resolved."
      },
      {
        "name": "die",
        "desc": "Remove event handlers previously attached using <code>.live()</code> from the elements."
      },
      {
        "name": "error",
        "desc": "Bind an event handler to the \"error\" JavaScript event."
      },
      {
        "name": "jQuery.boxModel",
        "desc": "States if the current page, in the user's browser, is being rendered using the <a href=\"https://www.w3.org/TR/REC-CSS2/box.html\">W3C CSS Box Model</a>."
      },
      {
        "name": "jQuery.browser",
        "desc": "Contains flags for the useragent, read from navigator.userAgent. <strong>This property was removed in jQuery 1.9</strong> and is available only through the jQuery.migrate plugin. Please try to use feature detection instead."
      },
      {
        "name": "jQuery.sub",
        "desc": "Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object."
      },
      {
        "name": "live",
        "desc": "Attach an event handler for all elements which match the current selector, now and in the future."
      },
      {
        "name": "load",
        "desc": "Bind an event handler to the \"load\" JavaScript event."
      },
      {
        "name": "selector",
        "desc": "A selector representing selector passed to jQuery(), if any, when creating the original set."
      },
      {
        "name": "size",
        "desc": "Return the number of elements in the jQuery object."
      },
      {
        "name": "toggle",
        "desc": "Bind two or more handlers to the matched elements, to be executed on alternate clicks."
      },
      {
        "name": "unload",
        "desc": "A function to execute when the event is triggered."
      }
    ],
    "categories": []
  },
  {
    "name": "Selectors",
    "slug": "selectors",
    "entries": [],
    "categories": [
      {
        "name": "Attribute",
        "slug": "attribute-selectors",
        "entries": [
          {
            "name": "attributeContainsPrefix",
            "desc": "An attribute name."
          },
          {
            "name": "attributeContains",
            "desc": "An attribute name."
          },
          {
            "name": "attributeContainsWord",
            "desc": "An attribute name."
          },
          {
            "name": "attributeEndsWith",
            "desc": "An attribute name."
          },
          {
            "name": "attributeEquals",
            "desc": "An attribute name."
          },
          {
            "name": "attributeNotEqual",
            "desc": "An attribute name."
          },
          {
            "name": "attributeStartsWith",
            "desc": "An attribute name."
          },
          {
            "name": "attributeHas",
            "desc": "An attribute name."
          },
          {
            "name": "attributeMultiple",
            "desc": "An attribute filter."
          }
        ]
      },
      {
        "name": "Basic",
        "slug": "basic-css-selectors",
        "entries": [
          {
            "name": "all",
            "desc": "Selects all elements."
          },
          {
            "name": "class",
            "desc": "A class to search for. An element can have multiple classes; only one of them must match."
          },
          {
            "name": "element",
            "desc": "An element to search for. Refers to the tagName of DOM nodes."
          },
          {
            "name": "id",
            "desc": "An ID to search for, specified via the id attribute of an element."
          },
          {
            "name": "multiple",
            "desc": "Any valid selector."
          }
        ]
      },
      {
        "name": "Basic Filter",
        "slug": "basic-filter-selectors",
        "entries": [
          {
            "name": "animated",
            "desc": "Select all elements that are in the progress of an animation at the time the selector is run."
          },
          {
            "name": "eq",
            "desc": "Zero-based index of the element to match."
          },
          {
            "name": "even",
            "desc": "Selects even elements, zero-indexed.  See also <a href=\"/odd-selector/\"><code>:odd</code></a>."
          },
          {
            "name": "first",
            "desc": "Selects the first matched DOM element."
          },
          {
            "name": "focus",
            "desc": "Selects element if it is currently focused."
          },
          {
            "name": "gt",
            "desc": "Zero-based index."
          },
          {
            "name": "header",
            "desc": "Selects all elements that are headers, like h1, h2, h3 and so on."
          },
          {
            "name": "lang",
            "desc": "A language code."
          },
          {
            "name": "last",
            "desc": "Selects the last matched element."
          },
          {
            "name": "lt",
            "desc": "Zero-based index."
          },
          {
            "name": "not",
            "desc": "A selector with which to filter by."
          },
          {
            "name": "odd",
            "desc": "Selects odd elements, zero-indexed.  See also <a href=\"/even-selector/\"><code>:even</code></a>."
          },
          {
            "name": "root",
            "desc": "Selects the element that is the root of the document."
          },
          {
            "name": "target",
            "desc": "Selects the target element indicated by the fragment identifier of the document's URI."
          }
        ]
      },
      {
        "name": "Child Filter",
        "slug": "child-filter-selectors",
        "entries": [
          {
            "name": "first-child",
            "desc": "Selects all elements that are the first child of their parent."
          },
          {
            "name": "first-of-type",
            "desc": "Selects all elements that are the first among siblings of the same element name."
          },
          {
            "name": "last-child",
            "desc": "Selects all elements that are the last child of their parent."
          },
          {
            "name": "last-of-type",
            "desc": "Selects all elements that are the last among siblings of the same element name."
          },
          {
            "name": "nth-child",
            "desc": "The index of each child to match, starting with <code>1</code>, the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-child(even)</code>, <code>:nth-child(4n)</code> )"
          },
          {
            "name": "nth-last-child",
            "desc": "The index of each child to match, starting with the last one (<code>1</code>), the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-last-child(even)</code>, <code>:nth-last-child(4n)</code> )"
          },
          {
            "name": "nth-last-of-type",
            "desc": "The index of each child to match, starting with the last one (<code>1</code>), the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-last-of-type(even)</code>, <code>:nth-last-of-type(4n)</code> )"
          },
          {
            "name": "nth-of-type",
            "desc": "The index of each child to match, starting with <code>1</code>, the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-of-type(even)</code>, <code>:nth-of-type(4n)</code> )"
          },
          {
            "name": "only-child",
            "desc": "Selects all elements that are the only child of their parent."
          },
          {
            "name": "only-of-type",
            "desc": "Selects all elements that have no siblings with the same element name."
          }
        ]
      },
      {
        "name": "Content Filter",
        "slug": "content-filter-selector",
        "entries": [
          {
            "name": "contains",
            "desc": "A string of text to look for. It's case sensitive."
          },
          {
            "name": "empty",
            "desc": "Select all elements that have no children (including text nodes)."
          },
          {
            "name": "has",
            "desc": "Any selector."
          },
          {
            "name": "parent",
            "desc": "Select all elements that have at least one child node (either an element or text)."
          }
        ]
      },
      {
        "name": "Form",
        "slug": "form-selectors",
        "entries": [
          {
            "name": "button",
            "desc": "Selects all button elements and elements of type button."
          },
          {
            "name": "checkbox",
            "desc": "Selects all elements of type checkbox."
          },
          {
            "name": "checked",
            "desc": "Matches all elements that are checked or selected."
          },
          {
            "name": "disabled",
            "desc": "Selects all elements that are disabled."
          },
          {
            "name": "enabled",
            "desc": "Selects all elements that are enabled."
          },
          {
            "name": "file",
            "desc": "Selects all elements of type file."
          },
          {
            "name": "focus",
            "desc": "Selects element if it is currently focused."
          },
          {
            "name": "image",
            "desc": "Selects all elements of type image."
          },
          {
            "name": "input",
            "desc": "Selects all input, textarea, select and button elements."
          },
          {
            "name": "password",
            "desc": "Selects all elements of type password."
          },
          {
            "name": "radio",
            "desc": "Selects all  elements of type radio."
          },
          {
            "name": "reset",
            "desc": "Selects all elements of type reset."
          },
          {
            "name": "selected",
            "desc": "Selects all elements that are selected."
          },
          {
            "name": "submit",
            "desc": "Selects all elements of type submit."
          },
          {
            "name": "text",
            "desc": "Selects all input elements of type text."
          }
        ]
      },
      {
        "name": "Hierarchy",
        "slug": "hierarchy-selectors",
        "entries": [
          {
            "name": "child",
            "desc": "Any valid selector."
          },
          {
            "name": "descendant",
            "desc": "Any valid selector."
          },
          {
            "name": "next adjacent",
            "desc": "Any valid selector."
          },
          {
            "name": "next siblings",
            "desc": "Any valid selector."
          }
        ]
      },
      {
        "name": "jQuery Extensions",
        "slug": "jquery-selector-extensions",
        "entries": [
          {
            "name": "animated",
            "desc": "Select all elements that are in the progress of an animation at the time the selector is run."
          },
          {
            "name": "attributeNotEqual",
            "desc": "An attribute name."
          },
          {
            "name": "button",
            "desc": "Selects all button elements and elements of type button."
          },
          {
            "name": "checkbox",
            "desc": "Selects all elements of type checkbox."
          },
          {
            "name": "eq",
            "desc": "Zero-based index of the element to match."
          },
          {
            "name": "even",
            "desc": "Selects even elements, zero-indexed.  See also <a href=\"/odd-selector/\"><code>:odd</code></a>."
          },
          {
            "name": "file",
            "desc": "Selects all elements of type file."
          },
          {
            "name": "first",
            "desc": "Selects the first matched DOM element."
          },
          {
            "name": "gt",
            "desc": "Zero-based index."
          },
          {
            "name": "has",
            "desc": "Any selector."
          },
          {
            "name": "header",
            "desc": "Selects all elements that are headers, like h1, h2, h3 and so on."
          },
          {
            "name": "hidden",
            "desc": "Selects all elements that are hidden."
          },
          {
            "name": "image",
            "desc": "Selects all elements of type image."
          },
          {
            "name": "input",
            "desc": "Selects all input, textarea, select and button elements."
          },
          {
            "name": "last",
            "desc": "Selects the last matched element."
          },
          {
            "name": "lt",
            "desc": "Zero-based index."
          },
          {
            "name": "odd",
            "desc": "Selects odd elements, zero-indexed.  See also <a href=\"/even-selector/\"><code>:even</code></a>."
          },
          {
            "name": "parent",
            "desc": "Select all elements that have at least one child node (either an element or text)."
          },
          {
            "name": "password",
            "desc": "Selects all elements of type password."
          },
          {
            "name": "radio",
            "desc": "Selects all  elements of type radio."
          },
          {
            "name": "reset",
            "desc": "Selects all elements of type reset."
          },
          {
            "name": "selected",
            "desc": "Selects all elements that are selected."
          },
          {
            "name": "submit",
            "desc": "Selects all elements of type submit."
          },
          {
            "name": "text",
            "desc": "Selects all input elements of type text."
          },
          {
            "name": "visible",
            "desc": "Selects all elements that are visible."
          }
        ]
      },
      {
        "name": "Visibility Filter",
        "slug": "visibility-filter-selectors",
        "entries": [
          {
            "name": "hidden",
            "desc": "Selects all elements that are hidden."
          },
          {
            "name": "visible",
            "desc": "Selects all elements that are visible."
          }
        ]
      }
    ]
  },
  {
    "name": "Traversing",
    "slug": "traversing",
    "entries": [
      {
        "name": "each",
        "desc": "A function to execute for each matched element."
      }
    ],
    "categories": [
      {
        "name": "Filtering",
        "slug": "filtering",
        "entries": [
          {
            "name": "eq",
            "desc": "An integer indicating the 0-based position of the element."
          },
          {
            "name": "even",
            "desc": "Reduce the set of matched elements to the even ones in the set, numbered from zero."
          },
          {
            "name": "filter",
            "desc": "A string containing a selector expression to match the current set of elements against."
          },
          {
            "name": "first",
            "desc": "Reduce the set of matched elements to the first in the set."
          },
          {
            "name": "has",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "is",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "last",
            "desc": "Reduce the set of matched elements to the final one in the set."
          },
          {
            "name": "map",
            "desc": "A function object that will be invoked for each element in the current set."
          },
          {
            "name": "not",
            "desc": "A string containing a selector expression, a DOM element, or an array of elements to match against the set."
          },
          {
            "name": "odd",
            "desc": "Reduce the set of matched elements to the odd ones in the set, numbered from zero."
          },
          {
            "name": "slice",
            "desc": "An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set."
          }
        ]
      },
      {
        "name": "Miscellaneous Traversing",
        "slug": "miscellaneous-traversal",
        "entries": [
          {
            "name": "add",
            "desc": "A string representing a selector expression to find additional elements to add to the set of matched elements."
          },
          {
            "name": "addBack",
            "desc": "A string containing a selector expression to match the current set of elements against."
          },
          {
            "name": "andSelf",
            "desc": "Add the previous set of elements on the stack to the current set."
          },
          {
            "name": "contents",
            "desc": "Get the children of each element in the set of matched elements, including text and comment nodes."
          },
          {
            "name": "end",
            "desc": "End the most recent filtering operation in the current chain and return the set of matched elements to its previous state."
          },
          {
            "name": "not",
            "desc": "A string containing a selector expression, a DOM element, or an array of elements to match against the set."
          }
        ]
      },
      {
        "name": "Tree Traversal",
        "slug": "tree-traversal",
        "entries": [
          {
            "name": "children",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "closest",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "find",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "next",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "nextAll",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "nextUntil",
            "desc": "A string containing a selector expression to indicate where to stop matching following sibling elements."
          },
          {
            "name": "offsetParent",
            "desc": "Get the closest ancestor element that is positioned."
          },
          {
            "name": "parent",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "parents",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "parentsUntil",
            "desc": "A string containing a selector expression to indicate where to stop matching ancestor elements."
          },
          {
            "name": "prev",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "prevAll",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "prevUntil",
            "desc": "A string containing a selector expression to indicate where to stop matching preceding sibling elements."
          },
          {
            "name": "siblings",
            "desc": "A string containing a selector expression to match elements against."
          }
        ]
      }
    ]
  },
  {
    "name": "Uncategorized",
    "slug": "uncategorized",
    "entries": [],
    "categories": []
  },
  {
    "name": "Utilities",
    "slug": "utilities",
    "entries": [
      {
        "name": "clearQueue",
        "desc": "A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue."
      },
      {
        "name": "dequeue",
        "desc": "A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue."
      },
      {
        "name": "jQuery.boxModel",
        "desc": "States if the current page, in the user's browser, is being rendered using the <a href=\"https://www.w3.org/TR/REC-CSS2/box.html\">W3C CSS Box Model</a>."
      },
      {
        "name": "jQuery.browser",
        "desc": "Contains flags for the useragent, read from navigator.userAgent. <strong>This property was removed in jQuery 1.9</strong> and is available only through the jQuery.migrate plugin. Please try to use feature detection instead."
      },
      {
        "name": "jQuery.contains",
        "desc": "The DOM element that may contain the other element."
      },
      {
        "name": "jQuery.data",
        "desc": "Store arbitrary data associated with the specified element and/or return the value that was set."
      },
      {
        "name": "jQuery.dequeue",
        "desc": "A DOM element from which to remove and execute a queued function."
      },
      {
        "name": "jQuery.each",
        "desc": "The array or array-like object to iterate over."
      },
      {
        "name": "jQuery.extend",
        "desc": "An object that will receive the new properties."
      },
      {
        "name": "jQuery.fn.extend",
        "desc": "An object to merge onto the jQuery prototype."
      },
      {
        "name": "jQuery.globalEval",
        "desc": "The JavaScript code to execute."
      },
      {
        "name": "jQuery.grep",
        "desc": "Finds the elements of an array which satisfy a filter function. The original array is not affected."
      },
      {
        "name": "jQuery.inArray",
        "desc": "The value to search for."
      },
      {
        "name": "jQuery.isArray",
        "desc": "Object to test whether or not it is an array."
      },
      {
        "name": "jQuery.isEmptyObject",
        "desc": "The object that will be checked to see if it's empty."
      },
      {
        "name": "jQuery.isFunction",
        "desc": "The value to be tested."
      },
      {
        "name": "jQuery.isNumeric",
        "desc": "Determines whether its argument represents a JavaScript number."
      },
      {
        "name": "jQuery.isPlainObject",
        "desc": "The object that will be checked to see if it's a plain object."
      },
      {
        "name": "jQuery.isWindow",
        "desc": "Object to test whether or not it is a window."
      },
      {
        "name": "jQuery.isXMLDoc",
        "desc": "The DOM node that will be checked to see if it's in an XML document."
      },
      {
        "name": "jQuery.makeArray",
        "desc": "Any object to turn into a native Array."
      },
      {
        "name": "jQuery.map",
        "desc": "The Array to translate."
      },
      {
        "name": "jQuery.merge",
        "desc": "Merge the contents of two arrays together into the first array."
      },
      {
        "name": "jQuery.noop",
        "desc": "An empty function."
      },
      {
        "name": "jQuery.now",
        "desc": "Return a number representing the current time."
      },
      {
        "name": "jQuery.parseHTML",
        "desc": "Parses a string into an array of DOM nodes."
      },
      {
        "name": "jQuery.parseJSON",
        "desc": "The JSON string to parse."
      },
      {
        "name": "jQuery.parseXML",
        "desc": "Parses a string into an XML document."
      },
      {
        "name": "jQuery.proxy",
        "desc": "The function whose context will be changed."
      },
      {
        "name": "jQuery.queue",
        "desc": "Show or manipulate the queue of functions to be executed on the matched element."
      },
      {
        "name": "jQuery.removeData",
        "desc": "A DOM element from which to remove data."
      },
      {
        "name": "jQuery.support",
        "desc": "A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project's feature-detection needs, we strongly recommend the use of an external library such as <a href=\"https://modernizr.com\">Modernizr</a> instead of dependency on properties in <code>jQuery.support</code>."
      },
      {
        "name": "jQuery.trim",
        "desc": "The string to trim."
      },
      {
        "name": "jQuery.type",
        "desc": "Object to get the internal JavaScript [[Class]] of."
      },
      {
        "name": "jQuery.unique",
        "desc": "The Array of DOM elements."
      },
      {
        "name": "jQuery.uniqueSort",
        "desc": "The Array of DOM elements."
      },
      {
        "name": "queue",
        "desc": "Show or manipulate the queue of functions to be executed on the matched elements."
      }
    ],
    "categories": []
  },
  {
    "name": "Version",
    "slug": "version",
    "entries": [],
    "categories": [
      {
        "name": "Version 1.0",
        "slug": "1.0",
        "entries": [
          {
            "name": "add",
            "desc": "A string representing a selector expression to find additional elements to add to the set of matched elements."
          },
          {
            "name": "addClass",
            "desc": "One or more space-separated classes to be added to the class attribute of each matched element."
          },
          {
            "name": "after",
            "desc": "HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert after each element in the set of matched elements."
          },
          {
            "name": "ajaxComplete",
            "desc": "The function to be invoked."
          },
          {
            "name": "ajaxError",
            "desc": "The function to be invoked."
          },
          {
            "name": "ajaxSend",
            "desc": "The function to be invoked."
          },
          {
            "name": "ajaxStart",
            "desc": "The function to be invoked."
          },
          {
            "name": "ajaxStop",
            "desc": "Register a handler to be called when all Ajax requests have completed. This is an <a href=\"/Ajax_Events/\">Ajax Event</a>."
          },
          {
            "name": "ajaxSuccess",
            "desc": "The function to be invoked."
          },
          {
            "name": "all",
            "desc": "Selects all elements."
          },
          {
            "name": "animate",
            "desc": "Perform a custom animation of a set of CSS properties."
          },
          {
            "name": "append",
            "desc": "DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the end of each element in the set of matched elements."
          },
          {
            "name": "appendTo",
            "desc": "A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter."
          },
          {
            "name": "attr",
            "desc": "Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element."
          },
          {
            "name": "attributeContainsPrefix",
            "desc": "An attribute name."
          },
          {
            "name": "attributeContains",
            "desc": "An attribute name."
          },
          {
            "name": "attributeContainsWord",
            "desc": "An attribute name."
          },
          {
            "name": "attributeEndsWith",
            "desc": "An attribute name."
          },
          {
            "name": "attributeEquals",
            "desc": "An attribute name."
          },
          {
            "name": "attributeNotEqual",
            "desc": "An attribute name."
          },
          {
            "name": "attributeStartsWith",
            "desc": "An attribute name."
          },
          {
            "name": "before",
            "desc": "HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert before each element in the set of matched elements."
          },
          {
            "name": "bind",
            "desc": "A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names."
          },
          {
            "name": "blur",
            "desc": "Bind an event handler to the \"blur\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "button",
            "desc": "Selects all button elements and elements of type button."
          },
          {
            "name": "change",
            "desc": "Bind an event handler to the \"change\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "checkbox",
            "desc": "Selects all elements of type checkbox."
          },
          {
            "name": "checked",
            "desc": "Matches all elements that are checked or selected."
          },
          {
            "name": "child",
            "desc": "Any valid selector."
          },
          {
            "name": "children",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "class",
            "desc": "A class to search for. An element can have multiple classes; only one of them must match."
          },
          {
            "name": "click",
            "desc": "Bind an event handler to the \"click\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "clone",
            "desc": "A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well."
          },
          {
            "name": "contextmenu",
            "desc": "Bind an event handler to the \"contextmenu\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "css",
            "desc": "Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element."
          },
          {
            "name": "dblclick",
            "desc": "Bind an event handler to the \"dblclick\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "descendant",
            "desc": "Any valid selector."
          },
          {
            "name": "disabled",
            "desc": "Selects all elements that are disabled."
          },
          {
            "name": "each",
            "desc": "A function to execute for each matched element."
          },
          {
            "name": "element",
            "desc": "An element to search for. Refers to the tagName of DOM nodes."
          },
          {
            "name": "empty",
            "desc": "Select all elements that have no children (including text nodes)."
          },
          {
            "name": "enabled",
            "desc": "Selects all elements that are enabled."
          },
          {
            "name": "end",
            "desc": "End the most recent filtering operation in the current chain and return the set of matched elements to its previous state."
          },
          {
            "name": "eq",
            "desc": "Zero-based index of the element to match."
          },
          {
            "name": "error",
            "desc": "Bind an event handler to the \"error\" JavaScript event."
          },
          {
            "name": "even",
            "desc": "Selects even elements, zero-indexed.  See also <a href=\"/odd-selector/\"><code>:odd</code></a>."
          },
          {
            "name": "event.preventDefault",
            "desc": "If this method is called, the default action of the event will not be triggered."
          },
          {
            "name": "event.stopPropagation",
            "desc": "Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event."
          },
          {
            "name": "event.target",
            "desc": "The DOM element that initiated the event."
          },
          {
            "name": "event.type",
            "desc": "Describes the nature of the event."
          },
          {
            "name": "fadeIn",
            "desc": "Display the matched elements by fading them to opaque."
          },
          {
            "name": "fadeOut",
            "desc": "Hide the matched elements by fading them to transparent."
          },
          {
            "name": "fadeTo",
            "desc": "Adjust the opacity of the matched elements."
          },
          {
            "name": "file",
            "desc": "Selects all elements of type file."
          },
          {
            "name": "filter",
            "desc": "A string containing a selector expression to match the current set of elements against."
          },
          {
            "name": "find",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "first",
            "desc": "Selects the first matched DOM element."
          },
          {
            "name": "focus",
            "desc": "Bind an event handler to the \"focus\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "get",
            "desc": "Retrieve the DOM elements matched by the jQuery object."
          },
          {
            "name": "gt",
            "desc": "Zero-based index."
          },
          {
            "name": "attributeHas",
            "desc": "An attribute name."
          },
          {
            "name": "height",
            "desc": "Get the current computed height for the first element in the set of matched elements or set the height of every matched element."
          },
          {
            "name": "hidden",
            "desc": "Selects all elements that are hidden."
          },
          {
            "name": "hide",
            "desc": "Hide the matched elements."
          },
          {
            "name": "hover",
            "desc": "Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements."
          },
          {
            "name": "html",
            "desc": "Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element."
          },
          {
            "name": "id",
            "desc": "An ID to search for, specified via the id attribute of an element."
          },
          {
            "name": "image",
            "desc": "Selects all elements of type image."
          },
          {
            "name": "index",
            "desc": "A selector representing a jQuery collection in which to look for an element."
          },
          {
            "name": "input",
            "desc": "Selects all input, textarea, select and button elements."
          },
          {
            "name": "insertAfter",
            "desc": "A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter."
          },
          {
            "name": "insertBefore",
            "desc": "A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter."
          },
          {
            "name": "is",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "jQuery.ajax",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.boxModel",
            "desc": "States if the current page, in the user's browser, is being rendered using the <a href=\"https://www.w3.org/TR/REC-CSS2/box.html\">W3C CSS Box Model</a>."
          },
          {
            "name": "jQuery.browser",
            "desc": "Contains flags for the useragent, read from navigator.userAgent. <strong>This property was removed in jQuery 1.9</strong> and is available only through the jQuery.migrate plugin. Please try to use feature detection instead."
          },
          {
            "name": "jQuery.each",
            "desc": "The array or array-like object to iterate over."
          },
          {
            "name": "jQuery.extend",
            "desc": "An object that will receive the new properties."
          },
          {
            "name": "jQuery.fn.extend",
            "desc": "An object to merge onto the jQuery prototype."
          },
          {
            "name": "jQuery.get",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.getJSON",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.getScript",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.grep",
            "desc": "Finds the elements of an array which satisfy a filter function. The original array is not affected."
          },
          {
            "name": "jQuery.map",
            "desc": "The Array to translate."
          },
          {
            "name": "jQuery.merge",
            "desc": "Merge the contents of two arrays together into the first array."
          },
          {
            "name": "jQuery.noConflict",
            "desc": "A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself)."
          },
          {
            "name": "jQuery.post",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.speed",
            "desc": "Creates an object containing a set of properties ready to be used in the definition of custom animations."
          },
          {
            "name": "jQuery.trim",
            "desc": "The string to trim."
          },
          {
            "name": "jQuery",
            "desc": "Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string."
          },
          {
            "name": "keydown",
            "desc": "A function to execute each time the event is triggered."
          },
          {
            "name": "keypress",
            "desc": "Bind an event handler to the \"keypress\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "keyup",
            "desc": "Bind an event handler to the \"keyup\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "last",
            "desc": "Selects the last matched element."
          },
          {
            "name": "length",
            "desc": "The number of elements in the jQuery object."
          },
          {
            "name": "load",
            "desc": "Bind an event handler to the \"load\" JavaScript event."
          },
          {
            "name": "lt",
            "desc": "Zero-based index."
          },
          {
            "name": "mousedown",
            "desc": "Bind an event handler to the \"mousedown\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseenter",
            "desc": "Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element."
          },
          {
            "name": "mouseleave",
            "desc": "Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element."
          },
          {
            "name": "mousemove",
            "desc": "Bind an event handler to the \"mousemove\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseout",
            "desc": "Bind an event handler to the \"mouseout\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseover",
            "desc": "Bind an event handler to the \"mouseover\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseup",
            "desc": "Bind an event handler to the \"mouseup\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "attributeMultiple",
            "desc": "An attribute filter."
          },
          {
            "name": "multiple",
            "desc": "Any valid selector."
          },
          {
            "name": "next adjacent",
            "desc": "Any valid selector."
          },
          {
            "name": "next siblings",
            "desc": "Any valid selector."
          },
          {
            "name": "next",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "not",
            "desc": "A selector with which to filter by."
          },
          {
            "name": "odd",
            "desc": "Selects odd elements, zero-indexed.  See also <a href=\"/even-selector/\"><code>:even</code></a>."
          },
          {
            "name": "parent",
            "desc": "Select all elements that have at least one child node (either an element or text)."
          },
          {
            "name": "parents",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "password",
            "desc": "Selects all elements of type password."
          },
          {
            "name": "prepend",
            "desc": "DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements."
          },
          {
            "name": "prependTo",
            "desc": "A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter."
          },
          {
            "name": "prev",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "pushStack",
            "desc": "An array of elements to push onto the stack and make into a new jQuery object."
          },
          {
            "name": "radio",
            "desc": "Selects all  elements of type radio."
          },
          {
            "name": "ready",
            "desc": "Specify a function to execute when the DOM is fully loaded."
          },
          {
            "name": "remove",
            "desc": "A selector expression that filters the set of matched elements to be removed."
          },
          {
            "name": "removeAttr",
            "desc": "An attribute to remove; as of version 1.7, it can be a space-separated list of attributes."
          },
          {
            "name": "removeClass",
            "desc": "Remove a single class, multiple classes, or all classes from each element in the set of matched elements."
          },
          {
            "name": "reset",
            "desc": "Selects all elements of type reset."
          },
          {
            "name": "resize",
            "desc": "Bind an event handler to the \"resize\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "scroll",
            "desc": "Bind an event handler to the \"scroll\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "select",
            "desc": "Bind an event handler to the \"select\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "selected",
            "desc": "Selects all elements that are selected."
          },
          {
            "name": "serialize",
            "desc": "Encode a set of form elements as a string for submission."
          },
          {
            "name": "show",
            "desc": "Display the matched elements."
          },
          {
            "name": "siblings",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "size",
            "desc": "Return the number of elements in the jQuery object."
          },
          {
            "name": "slideDown",
            "desc": "Display the matched elements with a sliding motion."
          },
          {
            "name": "slideToggle",
            "desc": "Display or hide the matched elements with a sliding motion."
          },
          {
            "name": "slideUp",
            "desc": "Hide the matched elements with a sliding motion."
          },
          {
            "name": "submit",
            "desc": "Selects all elements of type submit."
          },
          {
            "name": "text",
            "desc": "Selects all input elements of type text."
          },
          {
            "name": "toggle",
            "desc": "Bind two or more handlers to the matched elements, to be executed on alternate clicks."
          },
          {
            "name": "toggleClass",
            "desc": "One or more classes (separated by spaces) to be toggled for each element in the matched set."
          },
          {
            "name": "trigger",
            "desc": "Execute all handlers and behaviors attached to the matched elements for the given event type."
          },
          {
            "name": "unbind",
            "desc": "Remove a previously-attached event handler from the elements."
          },
          {
            "name": "unload",
            "desc": "A function to execute when the event is triggered."
          },
          {
            "name": "val",
            "desc": "Get the current value of the first element in the set of matched elements or set the value of every matched element."
          },
          {
            "name": "visible",
            "desc": "Selects all elements that are visible."
          },
          {
            "name": "width",
            "desc": "Get the current computed width for the first element in the set of matched elements or set the width of every matched element."
          },
          {
            "name": "wrap",
            "desc": "A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. When you pass a jQuery collection containing more than one element, or a selector matching more than one element, the first element will be used."
          }
        ]
      },
      {
        "name": "Version 1.0.4",
        "slug": "1.0.4",
        "entries": [
          {
            "name": "event.metaKey",
            "desc": "Indicates whether the META key was pressed when the event fired."
          },
          {
            "name": "event.pageX",
            "desc": "The mouse position relative to the left edge of the document."
          },
          {
            "name": "event.pageY",
            "desc": "The mouse position relative to the top edge of the document."
          },
          {
            "name": "jQuery.globalEval",
            "desc": "The JavaScript code to execute."
          }
        ]
      },
      {
        "name": "Version 1.1",
        "slug": "1.1",
        "entries": [
          {
            "name": "attr",
            "desc": "Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element."
          },
          {
            "name": "event.data",
            "desc": "An optional object of data passed to an event method when the current executing handler is bound."
          },
          {
            "name": "jQuery.ajaxSetup",
            "desc": "A set of key/value pairs that configure the default Ajax request. All options are optional."
          },
          {
            "name": "jQuery.speed",
            "desc": "Creates an object containing a set of properties ready to be used in the definition of custom animations."
          },
          {
            "name": "one",
            "desc": "Attach a handler to an event for the elements. The handler is executed at most once per element per event type."
          }
        ]
      },
      {
        "name": "Version 1.1.2",
        "slug": "1.1.2",
        "entries": [
          {
            "name": "eq",
            "desc": "An integer indicating the 0-based position of the element."
          }
        ]
      },
      {
        "name": "Version 1.1.3",
        "slug": "1.1.3",
        "entries": [
          {
            "name": "event.which",
            "desc": "For key or mouse events, this property indicates the specific key or button that was pressed."
          },
          {
            "name": "jQuery.browser",
            "desc": "Contains flags for the useragent, read from navigator.userAgent. <strong>This property was removed in jQuery 1.9</strong> and is available only through the jQuery.migrate plugin. Please try to use feature detection instead."
          },
          {
            "name": "jQuery.unique",
            "desc": "The Array of DOM elements."
          }
        ]
      },
      {
        "name": "Version 1.1.4",
        "slug": "1.1.4",
        "entries": [
          {
            "name": "contains",
            "desc": "A string of text to look for. It's case sensitive."
          },
          {
            "name": "event.relatedTarget",
            "desc": "The other DOM element involved in the event, if any."
          },
          {
            "name": "first-child",
            "desc": "Selects all elements that are the first child of their parent."
          },
          {
            "name": "has",
            "desc": "Any selector."
          },
          {
            "name": "jQuery.isXMLDoc",
            "desc": "The DOM node that will be checked to see if it's in an XML document."
          },
          {
            "name": "last-child",
            "desc": "Selects all elements that are the last child of their parent."
          },
          {
            "name": "nth-child",
            "desc": "The index of each child to match, starting with <code>1</code>, the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-child(even)</code>, <code>:nth-child(4n)</code> )"
          },
          {
            "name": "only-child",
            "desc": "Selects all elements that are the only child of their parent."
          },
          {
            "name": "slice",
            "desc": "An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set."
          }
        ]
      },
      {
        "name": "Version 1.2",
        "slug": "1.2",
        "entries": [
          {
            "name": "andSelf",
            "desc": "Add the previous set of elements on the stack to the current set."
          },
          {
            "name": "animated",
            "desc": "Select all elements that are in the progress of an animation at the time the selector is run."
          },
          {
            "name": "contents",
            "desc": "Get the children of each element in the set of matched elements, including text and comment nodes."
          },
          {
            "name": "dequeue",
            "desc": "A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue."
          },
          {
            "name": "hasClass",
            "desc": "The class name to search for."
          },
          {
            "name": "header",
            "desc": "Selects all elements that are headers, like h1, h2, h3 and so on."
          },
          {
            "name": "jQuery.inArray",
            "desc": "The value to search for."
          },
          {
            "name": "jQuery.isFunction",
            "desc": "The value to be tested."
          },
          {
            "name": "jQuery.makeArray",
            "desc": "Any object to turn into a native Array."
          },
          {
            "name": "jQuery.param",
            "desc": "An array, a plain object, or a jQuery object to serialize."
          },
          {
            "name": "map",
            "desc": "A function object that will be invoked for each element in the current set."
          },
          {
            "name": "nextAll",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "offset",
            "desc": "Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document."
          },
          {
            "name": "position",
            "desc": "Get the current coordinates of the first element in the set of matched elements, relative to the offset parent."
          },
          {
            "name": "prevAll",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "queue",
            "desc": "Show or manipulate the queue of functions to be executed on the matched elements."
          },
          {
            "name": "replaceAll",
            "desc": "A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace."
          },
          {
            "name": "replaceWith",
            "desc": "The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object."
          },
          {
            "name": "serializeArray",
            "desc": "Encode a set of form elements as an array of names and values."
          },
          {
            "name": "stop",
            "desc": "Stop the currently-running animation on the matched elements."
          },
          {
            "name": "triggerHandler",
            "desc": "Execute all handlers attached to an element for an event."
          },
          {
            "name": "wrapAll",
            "desc": "A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements."
          },
          {
            "name": "wrapInner",
            "desc": "An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements."
          }
        ]
      },
      {
        "name": "Version 1.2.3",
        "slug": "1.2.3",
        "entries": [
          {
            "name": "data",
            "desc": "Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements."
          },
          {
            "name": "jQuery.data",
            "desc": "Store arbitrary data associated with the specified element and/or return the value that was set."
          },
          {
            "name": "jQuery.removeData",
            "desc": "A DOM element from which to remove data."
          },
          {
            "name": "removeData",
            "desc": "A string naming the piece of data to delete."
          }
        ]
      },
      {
        "name": "Version 1.2.6",
        "slug": "1.2.6",
        "entries": [
          {
            "name": "event.timeStamp",
            "desc": "The difference in milliseconds between the time the browser created the event and January 1, 1970."
          },
          {
            "name": "innerHeight",
            "desc": "Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element."
          },
          {
            "name": "innerWidth",
            "desc": "Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element."
          },
          {
            "name": "offsetParent",
            "desc": "Get the closest ancestor element that is positioned."
          },
          {
            "name": "outerHeight",
            "desc": "Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element."
          },
          {
            "name": "outerWidth",
            "desc": "Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element."
          },
          {
            "name": "scrollLeft",
            "desc": "Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element."
          },
          {
            "name": "scrollTop",
            "desc": "Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element."
          }
        ]
      },
      {
        "name": "Version 1.3",
        "slug": "1.3",
        "entries": [
          {
            "name": "closest",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "context",
            "desc": "The DOM node context originally passed to <code>jQuery()</code>; if none was passed then context will likely be the document."
          },
          {
            "name": "die",
            "desc": "Remove event handlers previously attached using <code>.live()</code> from the elements."
          },
          {
            "name": "event.currentTarget",
            "desc": "The current DOM element within the event bubbling phase."
          },
          {
            "name": "event.isDefaultPrevented",
            "desc": "Returns whether <a href=\"/event.preventDefault/\">event.preventDefault()</a> was ever called on this event object."
          },
          {
            "name": "event.isImmediatePropagationStopped",
            "desc": "Returns whether event.stopImmediatePropagation() was ever called on this event object."
          },
          {
            "name": "event.isPropagationStopped",
            "desc": "Returns whether <a href=\"/event.stopPropagation/\">event.stopPropagation()</a> was ever called on this event object."
          },
          {
            "name": "event.result",
            "desc": "The last value returned by an event handler that was triggered by this event, unless the value was <code>undefined</code>."
          },
          {
            "name": "event.stopImmediatePropagation",
            "desc": "Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree."
          },
          {
            "name": "jQuery.dequeue",
            "desc": "A DOM element from which to remove and execute a queued function."
          },
          {
            "name": "jQuery.fx.off",
            "desc": "Globally disable all animations."
          },
          {
            "name": "jQuery.isArray",
            "desc": "Object to test whether or not it is an array."
          },
          {
            "name": "jQuery.queue",
            "desc": "Show or manipulate the queue of functions to be executed on the matched element."
          },
          {
            "name": "jQuery.support",
            "desc": "A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project's feature-detection needs, we strongly recommend the use of an external library such as <a href=\"https://modernizr.com\">Modernizr</a> instead of dependency on properties in <code>jQuery.support</code>."
          },
          {
            "name": "live",
            "desc": "Attach an event handler for all elements which match the current selector, now and in the future."
          },
          {
            "name": "pushStack",
            "desc": "An array of elements to push onto the stack and make into a new jQuery object."
          },
          {
            "name": "selector",
            "desc": "A selector representing selector passed to jQuery(), if any, when creating the original set."
          },
          {
            "name": "toggle",
            "desc": "Display or hide the matched elements."
          },
          {
            "name": "toggleClass",
            "desc": "One or more classes (separated by spaces) to be toggled for each element in the matched set."
          }
        ]
      },
      {
        "name": "Version 1.4",
        "slug": "1.4",
        "entries": [
          {
            "name": "add",
            "desc": "A string representing a selector expression to find additional elements to add to the set of matched elements."
          },
          {
            "name": "addClass",
            "desc": "One or more space-separated classes to be added to the class attribute of each matched element."
          },
          {
            "name": "after",
            "desc": "HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert after each element in the set of matched elements."
          },
          {
            "name": "append",
            "desc": "DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the end of each element in the set of matched elements."
          },
          {
            "name": "before",
            "desc": "HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert before each element in the set of matched elements."
          },
          {
            "name": "bind",
            "desc": "A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names."
          },
          {
            "name": "clearQueue",
            "desc": "A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue."
          },
          {
            "name": "closest",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "css",
            "desc": "Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element."
          },
          {
            "name": "data",
            "desc": "Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements."
          },
          {
            "name": "delay",
            "desc": "An integer indicating the number of milliseconds to delay execution of the next item in the queue."
          },
          {
            "name": "detach",
            "desc": "A selector expression that filters the set of matched elements to be removed."
          },
          {
            "name": "filter",
            "desc": "A string containing a selector expression to match the current set of elements against."
          },
          {
            "name": "first",
            "desc": "Reduce the set of matched elements to the first in the set."
          },
          {
            "name": "focusin",
            "desc": "Bind an event handler to the \"focusin\" event."
          },
          {
            "name": "focusout",
            "desc": "Bind an event handler to the \"focusout\" JavaScript event."
          },
          {
            "name": "has",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "html",
            "desc": "Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element."
          },
          {
            "name": "index",
            "desc": "A selector representing a jQuery collection in which to look for an element."
          },
          {
            "name": "jQuery.contains",
            "desc": "The DOM element that may contain the other element."
          },
          {
            "name": "jQuery.data",
            "desc": "Store arbitrary data associated with the specified element and/or return the value that was set."
          },
          {
            "name": "jQuery.isEmptyObject",
            "desc": "The object that will be checked to see if it's empty."
          },
          {
            "name": "jQuery.isPlainObject",
            "desc": "The object that will be checked to see if it's a plain object."
          },
          {
            "name": "jQuery.noop",
            "desc": "An empty function."
          },
          {
            "name": "jQuery.param",
            "desc": "An array, a plain object, or a jQuery object to serialize."
          },
          {
            "name": "jQuery.proxy",
            "desc": "The function whose context will be changed."
          },
          {
            "name": "jQuery",
            "desc": "Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string."
          },
          {
            "name": "last",
            "desc": "Reduce the set of matched elements to the final one in the set."
          },
          {
            "name": "nextUntil",
            "desc": "A string containing a selector expression to indicate where to stop matching following sibling elements."
          },
          {
            "name": "not",
            "desc": "A string containing a selector expression, a DOM element, or an array of elements to match against the set."
          },
          {
            "name": "offset",
            "desc": "Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document."
          },
          {
            "name": "parentsUntil",
            "desc": "A string containing a selector expression to indicate where to stop matching ancestor elements."
          },
          {
            "name": "prepend",
            "desc": "DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements."
          },
          {
            "name": "prevUntil",
            "desc": "A string containing a selector expression to indicate where to stop matching preceding sibling elements."
          },
          {
            "name": "removeAttr",
            "desc": "An attribute to remove; as of version 1.7, it can be a space-separated list of attributes."
          },
          {
            "name": "removeClass",
            "desc": "Remove a single class, multiple classes, or all classes from each element in the set of matched elements."
          },
          {
            "name": "replaceWith",
            "desc": "The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object."
          },
          {
            "name": "text",
            "desc": "Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements."
          },
          {
            "name": "toArray",
            "desc": "Retrieve all the elements contained in the jQuery set, as an array."
          },
          {
            "name": "toggleClass",
            "desc": "One or more classes (separated by spaces) to be toggled for each element in the matched set."
          },
          {
            "name": "unwrap",
            "desc": "A selector to check the parent element against. If an element's parent does not match the selector, the element won't be unwrapped."
          },
          {
            "name": "val",
            "desc": "Get the current value of the first element in the set of matched elements or set the value of every matched element."
          },
          {
            "name": "wrap",
            "desc": "A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. When you pass a jQuery collection containing more than one element, or a selector matching more than one element, the first element will be used."
          },
          {
            "name": "wrapAll",
            "desc": "A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements."
          },
          {
            "name": "wrapInner",
            "desc": "An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements."
          }
        ]
      },
      {
        "name": "Version 1.4.1",
        "slug": "1.4.1",
        "entries": [
          {
            "name": "die",
            "desc": "Remove event handlers previously attached using <code>.live()</code> from the elements."
          },
          {
            "name": "height",
            "desc": "Get the current computed height for the first element in the set of matched elements or set the height of every matched element."
          },
          {
            "name": "jQuery.error",
            "desc": "The message to send out."
          },
          {
            "name": "jQuery.parseJSON",
            "desc": "The JSON string to parse."
          },
          {
            "name": "width",
            "desc": "Get the current computed width for the first element in the set of matched elements or set the width of every matched element."
          }
        ]
      },
      {
        "name": "Version 1.4.2",
        "slug": "1.4.2",
        "entries": [
          {
            "name": "delegate",
            "desc": "Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements."
          },
          {
            "name": "undelegate",
            "desc": "Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements."
          }
        ]
      },
      {
        "name": "Version 1.4.3",
        "slug": "1.4.3",
        "entries": [
          {
            "name": "bind",
            "desc": "A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names."
          },
          {
            "name": "blur",
            "desc": "Bind an event handler to the \"blur\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "change",
            "desc": "Bind an event handler to the \"change\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "click",
            "desc": "Bind an event handler to the \"click\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "contextmenu",
            "desc": "Bind an event handler to the \"contextmenu\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "data",
            "desc": "Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements."
          },
          {
            "name": "dblclick",
            "desc": "Bind an event handler to the \"dblclick\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "delegate",
            "desc": "Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements."
          },
          {
            "name": "die",
            "desc": "Remove event handlers previously attached using <code>.live()</code> from the elements."
          },
          {
            "name": "error",
            "desc": "Bind an event handler to the \"error\" JavaScript event."
          },
          {
            "name": "event.namespace",
            "desc": "The namespace specified when the event was triggered."
          },
          {
            "name": "fadeIn",
            "desc": "Display the matched elements by fading them to opaque."
          },
          {
            "name": "fadeOut",
            "desc": "Hide the matched elements by fading them to transparent."
          },
          {
            "name": "fadeTo",
            "desc": "Adjust the opacity of the matched elements."
          },
          {
            "name": "focus",
            "desc": "Bind an event handler to the \"focus\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "focusin",
            "desc": "Bind an event handler to the \"focusin\" event."
          },
          {
            "name": "focusout",
            "desc": "Bind an event handler to the \"focusout\" JavaScript event."
          },
          {
            "name": "hide",
            "desc": "Hide the matched elements."
          },
          {
            "name": "jQuery.cssHooks",
            "desc": "Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties."
          },
          {
            "name": "jQuery.cssNumber",
            "desc": "An object containing all CSS properties that may be used without a unit. The <a href=\"/css/\"><code>.css()</code></a> method uses this object to see if it may append <code>px</code> to unitless values."
          },
          {
            "name": "jQuery.data",
            "desc": "Store arbitrary data associated with the specified element and/or return the value that was set."
          },
          {
            "name": "jQuery.fx.interval",
            "desc": "The rate (in milliseconds) at which animations fire."
          },
          {
            "name": "jQuery.isWindow",
            "desc": "Object to test whether or not it is a window."
          },
          {
            "name": "jQuery.now",
            "desc": "Return a number representing the current time."
          },
          {
            "name": "jQuery.type",
            "desc": "Object to get the internal JavaScript [[Class]] of."
          },
          {
            "name": "keydown",
            "desc": "A function to execute each time the event is triggered."
          },
          {
            "name": "keypress",
            "desc": "Bind an event handler to the \"keypress\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "keyup",
            "desc": "Bind an event handler to the \"keyup\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "load",
            "desc": "Bind an event handler to the \"load\" JavaScript event."
          },
          {
            "name": "mousedown",
            "desc": "Bind an event handler to the \"mousedown\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseenter",
            "desc": "Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element."
          },
          {
            "name": "mouseleave",
            "desc": "Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element."
          },
          {
            "name": "mousemove",
            "desc": "Bind an event handler to the \"mousemove\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseout",
            "desc": "Bind an event handler to the \"mouseout\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseover",
            "desc": "Bind an event handler to the \"mouseover\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "mouseup",
            "desc": "Bind an event handler to the \"mouseup\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "resize",
            "desc": "Bind an event handler to the \"resize\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "scroll",
            "desc": "Bind an event handler to the \"scroll\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "select",
            "desc": "Bind an event handler to the \"select\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "show",
            "desc": "Display the matched elements."
          },
          {
            "name": "slideDown",
            "desc": "Display the matched elements with a sliding motion."
          },
          {
            "name": "slideToggle",
            "desc": "Display or hide the matched elements with a sliding motion."
          },
          {
            "name": "slideUp",
            "desc": "Hide the matched elements with a sliding motion."
          },
          {
            "name": "submit",
            "desc": "Bind an event handler to the \"submit\" JavaScript event, or trigger that event on an element."
          },
          {
            "name": "toggle",
            "desc": "Display or hide the matched elements."
          },
          {
            "name": "unbind",
            "desc": "Remove a previously-attached event handler from the elements."
          },
          {
            "name": "undelegate",
            "desc": "Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements."
          },
          {
            "name": "unload",
            "desc": "A function to execute when the event is triggered."
          }
        ]
      },
      {
        "name": "Version 1.4.4",
        "slug": "1.4.4",
        "entries": [
          {
            "name": "fadeToggle",
            "desc": "Display or hide the matched elements by animating their opacity."
          }
        ]
      },
      {
        "name": "Version 1.5",
        "slug": "1.5",
        "entries": [
          {
            "name": "clone",
            "desc": "A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well."
          },
          {
            "name": "deferred.done",
            "desc": "A function, or array of functions, that are called when the Deferred is resolved."
          },
          {
            "name": "deferred.fail",
            "desc": "A function, or array of functions, that are called when the Deferred is rejected."
          },
          {
            "name": "deferred.isRejected",
            "desc": "Determine whether a Deferred object has been rejected."
          },
          {
            "name": "deferred.isResolved",
            "desc": "Determine whether a Deferred object has been resolved."
          },
          {
            "name": "deferred.promise",
            "desc": "Object onto which the promise methods have to be attached"
          },
          {
            "name": "deferred.reject",
            "desc": "Optional arguments that are passed to the failCallbacks."
          },
          {
            "name": "deferred.rejectWith",
            "desc": "Context passed to the failCallbacks as the <code>this</code> object."
          },
          {
            "name": "deferred.resolve",
            "desc": "Optional arguments that are passed to the doneCallbacks."
          },
          {
            "name": "deferred.resolveWith",
            "desc": "Context passed to the doneCallbacks as the <code>this</code> object."
          },
          {
            "name": "deferred.then",
            "desc": "A function that is called when the Deferred is resolved."
          },
          {
            "name": "jQuery.Deferred",
            "desc": "A function that is called just before the constructor returns."
          },
          {
            "name": "jQuery.ajax",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.ajaxPrefilter",
            "desc": "Handle custom Ajax options or modify existing options before each request is sent and before they are processed by <code>$.ajax()</code>."
          },
          {
            "name": "jQuery.ajaxTransport",
            "desc": "Creates an object that handles the actual transmission of Ajax data."
          },
          {
            "name": "jQuery.get",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.getJSON",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.getScript",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.hasData",
            "desc": "A DOM element to be checked for data."
          },
          {
            "name": "jQuery.parseXML",
            "desc": "Parses a string into an XML document."
          },
          {
            "name": "jQuery.post",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.sub",
            "desc": "Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object."
          },
          {
            "name": "jQuery.when",
            "desc": "Zero or more Thenable objects."
          }
        ]
      },
      {
        "name": "Version 1.5.1",
        "slug": "1.5.1",
        "entries": [
          {
            "name": "jQuery.ajax",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.support",
            "desc": "A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project's feature-detection needs, we strongly recommend the use of an external library such as <a href=\"https://modernizr.com\">Modernizr</a> instead of dependency on properties in <code>jQuery.support</code>."
          }
        ]
      },
      {
        "name": "Version 1.6",
        "slug": "1.6",
        "entries": [
          {
            "name": "attr",
            "desc": "Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element."
          },
          {
            "name": "closest",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "deferred.always",
            "desc": "A function, or array of functions, that is called when the Deferred is resolved or rejected."
          },
          {
            "name": "deferred.pipe",
            "desc": "An optional function that is called when the Deferred is resolved."
          },
          {
            "name": "find",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "focus",
            "desc": "Selects element if it is currently focused."
          },
          {
            "name": "is",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "jQuery.holdReady",
            "desc": "Holds or releases the execution of jQuery's ready event."
          },
          {
            "name": "jQuery.map",
            "desc": "The Array to translate."
          },
          {
            "name": "jQuery.proxy",
            "desc": "The function whose context will be changed."
          },
          {
            "name": "nextUntil",
            "desc": "A string containing a selector expression to indicate where to stop matching following sibling elements."
          },
          {
            "name": "parentsUntil",
            "desc": "A string containing a selector expression to indicate where to stop matching ancestor elements."
          },
          {
            "name": "prevUntil",
            "desc": "A string containing a selector expression to indicate where to stop matching preceding sibling elements."
          },
          {
            "name": "promise",
            "desc": "The type of queue that needs to be observed."
          },
          {
            "name": "prop",
            "desc": "Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element."
          },
          {
            "name": "removeProp",
            "desc": "The name of the property to remove."
          },
          {
            "name": "undelegate",
            "desc": "Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements."
          }
        ]
      },
      {
        "name": "Version 1.7",
        "slug": "1.7",
        "entries": [
          {
            "name": "callbacks.add",
            "desc": "A function, or array of functions, that are to be added to the callback list."
          },
          {
            "name": "callbacks.disable",
            "desc": "Disable a callback list from doing anything more."
          },
          {
            "name": "callbacks.disabled",
            "desc": "Determine if the callbacks list has been disabled."
          },
          {
            "name": "callbacks.empty",
            "desc": "Remove all of the callbacks from a list."
          },
          {
            "name": "callbacks.fire",
            "desc": "The argument or list of arguments to pass back to the callback list."
          },
          {
            "name": "callbacks.fireWith",
            "desc": "A reference to the context in which the callbacks in the list should be fired."
          },
          {
            "name": "callbacks.fired",
            "desc": "Determine if the callbacks have already been called at least once."
          },
          {
            "name": "callbacks.has",
            "desc": "The callback to search for."
          },
          {
            "name": "callbacks.lock",
            "desc": "Lock a callback list in its current state."
          },
          {
            "name": "callbacks.locked",
            "desc": "Determine if the callbacks list has been locked."
          },
          {
            "name": "callbacks.remove",
            "desc": "A function, or array of functions, that are to be removed from the callback list."
          },
          {
            "name": "deferred.notify",
            "desc": "Optional arguments that are passed to the progressCallbacks."
          },
          {
            "name": "deferred.notifyWith",
            "desc": "Context passed to the progressCallbacks as the <code>this</code> object."
          },
          {
            "name": "deferred.pipe",
            "desc": "An optional function that is called when the Deferred is resolved."
          },
          {
            "name": "deferred.progress",
            "desc": "A function, or array of functions, to be called when the Deferred generates progress notifications."
          },
          {
            "name": "deferred.state",
            "desc": "Determine the current state of a Deferred object."
          },
          {
            "name": "deferred.then",
            "desc": "A function that is called when the Deferred is resolved."
          },
          {
            "name": "event.delegateTarget",
            "desc": "The element where the currently-called jQuery event handler was attached."
          },
          {
            "name": "is",
            "desc": "A string containing a selector expression to match elements against."
          },
          {
            "name": "jQuery.Callbacks",
            "desc": "An optional list of space-separated flags that change how the callback list behaves."
          },
          {
            "name": "jQuery.isNumeric",
            "desc": "Determines whether its argument represents a JavaScript number."
          },
          {
            "name": "off",
            "desc": "Remove an event handler."
          },
          {
            "name": "on",
            "desc": "Attach an event handler function for one or more events to the selected elements."
          },
          {
            "name": "removeAttr",
            "desc": "An attribute to remove; as of version 1.7, it can be a space-separated list of attributes."
          },
          {
            "name": "removeData",
            "desc": "A string naming the piece of data to delete."
          },
          {
            "name": "stop",
            "desc": "Stop the currently-running animation on the matched elements."
          }
        ]
      },
      {
        "name": "Version 1.8",
        "slug": "1.8",
        "entries": [
          {
            "name": "addBack",
            "desc": "A string containing a selector expression to match the current set of elements against."
          },
          {
            "name": "deferred.pipe",
            "desc": "An optional function that is called when the Deferred is resolved."
          },
          {
            "name": "eq",
            "desc": "Zero-based index of the element to match."
          },
          {
            "name": "innerHeight",
            "desc": "Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element."
          },
          {
            "name": "innerWidth",
            "desc": "Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element."
          },
          {
            "name": "jQuery.parseHTML",
            "desc": "Parses a string into an array of DOM nodes."
          },
          {
            "name": "jQuery.ready",
            "desc": "A Promise-like object (or \"thenable\") that resolves when the document is ready."
          },
          {
            "name": "outerHeight",
            "desc": "Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element."
          },
          {
            "name": "outerWidth",
            "desc": "Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element."
          }
        ]
      },
      {
        "name": "Version 1.9",
        "slug": "1.9",
        "entries": [
          {
            "name": "css",
            "desc": "Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element."
          },
          {
            "name": "finish",
            "desc": "Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements."
          },
          {
            "name": "first-of-type",
            "desc": "Selects all elements that are the first among siblings of the same element name."
          },
          {
            "name": "lang",
            "desc": "A language code."
          },
          {
            "name": "last-of-type",
            "desc": "Selects all elements that are the last among siblings of the same element name."
          },
          {
            "name": "nth-last-child",
            "desc": "The index of each child to match, starting with the last one (<code>1</code>), the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-last-child(even)</code>, <code>:nth-last-child(4n)</code> )"
          },
          {
            "name": "nth-last-of-type",
            "desc": "The index of each child to match, starting with the last one (<code>1</code>), the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-last-of-type(even)</code>, <code>:nth-last-of-type(4n)</code> )"
          },
          {
            "name": "nth-of-type",
            "desc": "The index of each child to match, starting with <code>1</code>, the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-of-type(even)</code>, <code>:nth-of-type(4n)</code> )"
          },
          {
            "name": "only-of-type",
            "desc": "Selects all elements that have no siblings with the same element name."
          },
          {
            "name": "root",
            "desc": "Selects the element that is the root of the document."
          },
          {
            "name": "target",
            "desc": "Selects the target element indicated by the fragment identifier of the document's URI."
          }
        ]
      },
      {
        "name": "Version 1.12 & 2.2",
        "slug": "1.12-and-2.2",
        "entries": [
          {
            "name": "addClass",
            "desc": "One or more space-separated classes to be added to the class attribute of each matched element."
          },
          {
            "name": "jQuery.get",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.post",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.uniqueSort",
            "desc": "The Array of DOM elements."
          },
          {
            "name": "removeClass",
            "desc": "Remove a single class, multiple classes, or all classes from each element in the set of matched elements."
          },
          {
            "name": "toggleClass",
            "desc": "One or more classes (separated by spaces) to be toggled for each element in the matched set."
          }
        ]
      },
      {
        "name": "Version 3.0",
        "slug": "3.0",
        "entries": [
          {
            "name": "deferred.catch",
            "desc": "A function that is called when the Deferred is rejected."
          },
          {
            "name": "jQuery.escapeSelector",
            "desc": "Escapes any character that has a special meaning in a CSS selector."
          }
        ]
      },
      {
        "name": "Version 3.1",
        "slug": "3.1",
        "entries": [
          {
            "name": "jQuery.readyException",
            "desc": "Handles errors thrown synchronously in functions wrapped in <code>jQuery()</code>."
          }
        ]
      },
      {
        "name": "Version 3.2",
        "slug": "3.2",
        "entries": [
          {
            "name": "contents",
            "desc": "Get the children of each element in the set of matched elements, including text and comment nodes."
          },
          {
            "name": "css",
            "desc": "Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element."
          }
        ]
      },
      {
        "name": "Version 3.3",
        "slug": "3.3",
        "entries": [
          {
            "name": "addClass",
            "desc": "One or more space-separated classes to be added to the class attribute of each matched element."
          },
          {
            "name": "removeClass",
            "desc": "Remove a single class, multiple classes, or all classes from each element in the set of matched elements."
          },
          {
            "name": "toggleClass",
            "desc": "One or more classes (separated by spaces) to be toggled for each element in the matched set."
          }
        ]
      },
      {
        "name": "Version 3.4",
        "slug": "3.4",
        "entries": [
          {
            "name": "jQuery.extend",
            "desc": "An object that will receive the new properties."
          }
        ]
      },
      {
        "name": "Version 3.5",
        "slug": "3.5",
        "entries": [
          {
            "name": "even",
            "desc": "Reduce the set of matched elements to the even ones in the set, numbered from zero."
          },
          {
            "name": "jQuery.ajax",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.getScript",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "jQuery.htmlPrefilter",
            "desc": "Modify and filter HTML strings passed through <a href=\"/category/manipulation/\">jQuery manipulation methods</a>."
          },
          {
            "name": "odd",
            "desc": "Reduce the set of matched elements to the odd ones in the set, numbered from zero."
          }
        ]
      },
      {
        "name": "All",
        "slug": "all",
        "entries": []
      }
    ]
  }
]